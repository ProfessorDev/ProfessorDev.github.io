{"version":3,"sources":["components/SideNav.js","components/TopMenu.js","utils/isMediaMatched.js","App.js","serviceWorker.js","index.js","tailwind.config.js"],"names":["mode","setMode","useState","active","setActive","menuList","link","text","icon","className","minimum","theme","type","onClick","map","menuItem","index","key","full","color","width","leftChildren","twClassNames","md","prevMode","rightChildren","direction","open","setOpen","fullConfig","resolveConfig","tailwindConfig","isMediaMatched","media","window","matchMedia","screens","matches","App","toggleSideMenu","SideNav","e","stopPropagation","TopMenu","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","colors","require","onColors","100","200","300","400","500","600","700","800","900","module","exports","purge","extend","primary","indigo","secondary","teal","neutral","gray","red","warning","orange","background","black","surface","on_primary","on_secondary","on_neutral","on_background","white","on_surface","on_error","on_warning","minWidth","variants","plugins"],"mappings":"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","file":"static/js/main.6297a2ad.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport {SideNav, SideNavLabel} from \"professordev-designsystem\";\n\nexport default function ({mode, setMode}) {\n\n    const [active, setActive] = useState(0);\n\n    const menuList = [{\n        link: \"/home\",\n        text: \"Home\",\n        icon: <i className=\"fas fa-home\"/>,\n    }, {\n        link: \"/profile\",\n        text: \"Profile\",\n        icon: <i className=\"fas fa-user\"/>,\n    },{\n        link: \"/courses\",\n        text: \"Courses\",\n        icon: <i className=\"fas fa-chalkboard\"/>,\n    },{\n        link: \"/course_management\",\n        text: \"Course Management\",\n        icon: <i className=\"fas fa-tasks\"/>,\n    },{\n        link: \"/students\",\n        text: \"Students\",\n        icon: <i className=\"fas fa-user-graduate\"/>,\n    },{\n        link: \"/teachers\",\n        text: \"Teachers\",\n        icon: <i className=\"fas fa-chalkboard-teacher\"/>,\n    },{\n        link: \"/enrolled_users\",\n        text: \"Enrolled Users\",\n        icon: <i className=\"fas fa-chalkboard\"/>,\n    },{\n        link: \"/live_sessions\",\n        text: \"Live Sessions\",\n        icon: <i className=\"fas fa-satellite-dish\"/>,\n    },{\n        link: \"/reviews\",\n        text: \"Reviews\",\n        icon: <i className=\"far fa-comment\"/>,\n    },{\n        link: \"/payment_details\",\n        text: \"Payment Details\",\n        icon: <i className=\"fas fa-money-check\"/>,\n    },{\n        link: \"/help_and_support\",\n        text: \"Help & Support\",\n        icon: <i className=\"fas fa-hands-helping\"/>,\n    }];\n\n    return (\n        <SideNav\n            minimum={(\n                <>\n                    <SideNavLabel theme={{type: \"header\"}} onClick={setMode}>\n                        <div className=\"text-md\">\n                            <i className=\"fas fa-bars\"/>\n                        </div>\n                    </SideNavLabel>\n                    {\n                        menuList.map((menuItem, index) => (\n                            <SideNavLabel\n                                theme={{active: active === index}}\n                                onClick={() => setActive(index)}\n                                key={index}\n                            >\n                                <div className=\"text-sm\">\n                                    {menuItem.icon}\n                                </div>\n                            </SideNavLabel>\n                        ))\n                    }\n                </>\n            )}\n            full={(\n                <>\n                    <SideNavLabel theme={{type: \"header\"}} onClick={() => setMode(!mode)}>\n                        <div className=\"text-md\">\n                            <b>Electropro</b>\n                        </div>\n                    </SideNavLabel>\n                    {\n                        menuList.map((menuItem, index) => (\n                            <SideNavLabel\n                                theme={{active: active === index}}\n                                onClick={() => setActive(index)}\n                                key={index}\n                            >\n                                <div className=\"text-sm\">\n                                    <span className=\"inline-block w-6\">\n                                        {menuItem.icon}\n                                    </span>\n                                    {menuItem.text}\n                                </div>\n                            </SideNavLabel>\n                        ))\n                    }\n                </>\n            )}\n            theme={{color: \"neutral\", width: mode ? \"12\" : \"64\"}}\n            mode={mode ? \"minimum\" : \"full\"}\n        />\n    )\n}","import React from \"react\";\nimport {TopMenu, twClassNames} from \"professordev-designsystem\";\nimport {TopMenuItem} from \"professordev-designsystem\";\nimport {Dropdown} from \"professordev-designsystem\";\nimport {DropdownButton} from \"professordev-designsystem\";\nimport {DropdownList} from \"professordev-designsystem\";\nimport {DropdownItem} from \"professordev-designsystem\";\nimport {DropdownDivider} from \"professordev-designsystem\";\nimport {DropdownGroup} from \"professordev-designsystem\";\nimport {DropdownInfo} from \"professordev-designsystem\";\n\nexport default function ({mode, setMode}) {\n    return (\n        <TopMenu\n            className=\"bg-white\"\n            leftChildren={(\n                <>\n                    <TopMenuItem>\n                        <div className={twClassNames({\n                            '': [\n                                'px-2',\n                                'cursor-pointer',\n                            ],\n                            md: [\n                                'hidden',\n                            ]\n                        })} onClick={() => setMode(prevMode => !prevMode)}>\n                            {\n                                mode ? (\n                                    <i className=\"fas fa-bars\"/>\n                                ) : (\n                                    <i className=\"fas fa-times\"/>\n                                )\n                            }\n                        </div>\n                    </TopMenuItem>\n                </>\n            )}\n            rightChildren={(\n                <>\n                    <TopMenuItem>\n                        <Dropdown className=\"\">\n                            <DropdownButton className=\"pr-4 p-1\">\n                                Profile <i className=\"fa fa-caret-down\"/>\n                            </DropdownButton>\n                            <DropdownList direction=\"top-right\">\n                                <DropdownItem theme={{color: \"primary\"}}>\n                                    Item1\n                                </DropdownItem>\n                                <DropdownDivider/>\n                                <DropdownItem theme={{color: \"primary\"}}>\n                                    Item2\n                                </DropdownItem>\n                                <DropdownDivider/>\n                                <DropdownItem theme={{color: \"primary\"}}>\n                                    Item3\n                                </DropdownItem>\n                                <DropdownDivider/>\n                                <DropdownItem theme={{color: \"primary\"}}>\n                                    Item4\n                                </DropdownItem>\n                                <DropdownDivider/>\n                                <DropdownGroup>\n                                    <DropdownItem theme={{color: \"primary\"}}>\n                                        <div className=\"text-sm\">\n                                            Signup\n                                        </div>\n                                        <div className=\"text-xs whitespace-pre\">\n                                            Click here to signup\n                                        </div>\n                                    </DropdownItem>\n                                    <DropdownDivider/>\n                                    <DropdownItem theme={{color: \"primary\"}}>\n                                        <div className=\"text-sm\">\n                                            Login\n                                        </div>\n                                        <div className=\"text-xs whitespace-pre\">\n                                            Click here to Login\n                                        </div>\n                                    </DropdownItem>\n                                </DropdownGroup>\n                                <DropdownDivider/>\n                                <DropdownInfo>\n                                    <div className=\"text-center text-sm whitespace-pre\">\n                                        please select one of the option dfsdf df sfsdfdfs\n                                    </div>\n                                </DropdownInfo>\n                                <DropdownDivider/>\n                                <DropdownItem theme={{color: \"primary\"}}>\n                                    {(open, setOpen) => (\n                                        <div onClick={() => setOpen(false)}>\n                                            <div className=\"text-sm\">\n                                                Close\n                                            </div>\n                                            <div className=\"text-xs whitespace-pre\">\n                                                Click here to close\n                                            </div>\n                                        </div>\n                                    )}\n                                </DropdownItem>\n                            </DropdownList>\n                        </Dropdown>\n                    </TopMenuItem>\n                </>\n            )}\n        >\n\n        </TopMenu>\n    )\n}","import resolveConfig from 'tailwindcss/resolveConfig'\nimport tailwindConfig from '../tailwind.config.js'\n\n\nconst fullConfig = resolveConfig(tailwindConfig);\n\nexport default function isMediaMatched(media = \"initial\") {\n    return window.matchMedia(`(min-width: ${fullConfig?.theme.screens[media] || \"0px\"})`).matches;\n}\n","import React, {useState} from 'react';\nimport SideNav from \"./components/SideNav\";\nimport TopMenu from \"./components/TopMenu\";\nimport {twClassNames} from \"professordev-designsystem\";\nimport _ from \"lodash\";\nimport isMediaMatched from \"./utils/isMediaMatched\";\n\nfunction App() {\n    const [mode, setMode] = useState(true);\n\n    const toggleSideMenu = () => {\n        setMode(prevMode => !prevMode);\n    };\n\n    return (\n        <div className=\"flex h-screen bg-gray-400 overflow-x-auto\">\n            <div className={twClassNames({\n                '': [\n                    mode ? 'hidden' : 'block',\n                    // !mode && 'w-64',\n                    \"flex\",\n                    // \"border border-red-700\",\n                    \"h-full\"\n                ],\n                md: [\n                    'block',\n                    'flex-initial',\n                    // !mode && 'w-64',\n                ]\n            })}>\n                <div className=\"overflow-y-auto flex-1 remove-scrollbar h-full\">\n                    <SideNav mode={mode} setMode={toggleSideMenu}/>\n                </div>\n            </div>\n            <div\n                className={twClassNames({\n                    '': [\n                        'inline-flex',\n                        'flex-col',\n                        'flex-1',\n                        'overflow-auto',\n                        'min-w-screen',\n                    ],\n                    md: [\n                        'min-w-0',\n                        'flex-1',\n                        'min-w-0',\n                    ]\n                })}\n                onClick={(e) => {\n                    if (mode === false) {\n                        e.stopPropagation();\n                        setMode(true)\n                    }\n                }}\n            >\n                <div>\n                    <TopMenu mode={mode} setMode={toggleSideMenu}/>\n                </div>\n                <div className=\"flex-1 p-2 overflow-auto\">\n                    <div className=\"bg-white min-h-full\">\n                        {isMediaMatched('initial') && \"Initial\"} <br/>\n                        {isMediaMatched(\"sm\") && \"Small\"} <br/>\n                        {isMediaMatched(\"md\") && \"Medium\"} <br/>\n                        {isMediaMatched(\"lg\") && \"Large\"} <br/>\n                        {isMediaMatched(\"xl\") && \"Extra Large\"} <br/>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/**\n * Do not edit this file for app development\n * use App.js to use imports or edits\n * use cssImport.js to import css files\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './cssImport';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const {colors} = require('tailwindcss/defaultTheme');\n\nconst onColors = {\n  100: \"#000000\",\n  200: \"#000000\",\n  300: \"#000000\",\n  400: \"#000000\",\n  500: \"#FFFFFF\",\n  600: \"#FFFFFF\",\n  700: \"#FFFFFF\",\n  800: \"#FFFFFF\",\n  900: \"#FFFFFF\",\n};\n\nmodule.exports = {\n  purge: [],\n  theme: {\n    extend: {\n      colors: {\n        primary: colors.indigo,\n        secondary: colors.teal,\n        neutral: colors.gray,\n        error: colors.red,\n        warning: colors.orange,\n        background: colors.black,\n        surface: colors.black,\n        on_primary: onColors,\n        on_secondary: onColors,\n        on_neutral: onColors,\n        on_background: colors.white,\n        on_surface: colors.white,\n        on_error: onColors,\n        on_warning: onColors,\n      },\n      minWidth: {\n        'screen': '100vw',\n      }\n    },\n  },\n  variants: {},\n  plugins: [],\n};\n"],"sourceRoot":""}